<refentry version="5.0" xml:id="mk_target">
  <refmeta>
    <refentrytitle>mk_target</refentrytitle>
    <manvolnum>3mk</manvolnum>
    <refmiscinfo class="manual">MakeKit Reference</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>mk_target</refname>
    <refpurpose>Define a build rule</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <cmdsynopsis sepchar=" ">
      <command>mk_target</command>
      <arg choice="plain" rep="norepeat"><literal>TARGET=</literal><replaceable class="parameter">target</replaceable></arg>
      <arg choice="opt" rep="norepeat"><literal>DEPS=</literal><replaceable class="parameter">dependencies</replaceable></arg>
      <arg choice="opt" rep="repeat"><replaceable class="parameter">command</replaceable></arg>
    </cmdsynopsis>
  </refsynopsisdiv>
  
  <refsection><info><title>Description</title></info>
    
    <para>
      <command>mk_target</command> defines a generic build rule consisting of a target,
      a list of dependencies, and a command to generate the target from the dependencies.
    </para>
  </refsection>
  
  <refsection><info><title>Parameters</title></info>
    
    <variablelist>
      <varlistentry>
        <term><literal>TARGET=</literal><replaceable>target</replaceable></term>
        <listitem>
          <para>
	    The target which is generated by the build rule.  <replaceable>target</replaceable>
	    should be in MakeKit target notation (see <citerefentry><refentrytitle>mk_resolve_target</refentrytitle><manvolnum>3mk</manvolnum></citerefentry> for details).
	  </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>DEPS=</literal><replaceable>dependencies</replaceable></term>
        <listitem>
          <para>
	    A space-separated list of dependencies in MakeKit target notation.  File patterns will be expanded.
	  </para>
	  <para>
	    The list should be internally quoted to escape characters with special meaning to the shell.
	    For example, passing <literal>DEPS="*.txt"</literal> would expand to all text files in the source
	    directory, whereas <literal>DEPS="'weird * file.txt'"</literal> would specify a file whose name
	    is literally: <literal>weird * file.txt</literal>
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>command</replaceable></term>
        <listitem>
          <para>
	    The remaining parameters to <command>mk_target</command> are the command
	    that should be executed in order to create the target.  If no parameters are
	    specified, a build rule will be generated with no action.  Each parameter may
	    be a special form which is subject to preprocessing.  See
	    <xref linkend="mk-target-special"/> for details.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>
  <refsection xml:id="result"><info><title>Result</title></info>
    
    <para>
      <command>mk_target</command> returns 0 on success and sets <literal>result</literal>
      to the fully-qualified target which it defined.
    </para>
  </refsection>
  <refsection xml:id="mk-target-special" xreflabel="Special Forms"><info><title>Special Forms</title></info>
    
    <para>
      The positional parameters to <command>mk_target</command> are subject to additional processing
      if they match any of the following forms:
    </para>
    <variablelist>
      <varlistentry>
	<term><literal>@</literal><replaceable>file</replaceable></term>
	<listitem>
	  <para>
	    Indicates that the parameter is a fully-qualified target.  The parameter will be replaced with
	    just <replaceable>file</replaceable>.  Among other uses, this allows the output of a prior
	    invocation of <command>mk_target</command> to be used verbatim in <replaceable>command</replaceable>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><literal>&amp;</literal><replaceable>targets</replaceable></term>
	<listitem>
	  <para>
	    Indicates that the parameter should be interpreted as a space separated list of targets
	    in MakeKit target notation.  The list will be expanded into multiple parameters according to
	    the same quoting and expansion rules as the <parameter>DEPS</parameter> parameter above.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><literal>%</literal><replaceable>VAR</replaceable></term>
	<listitem>
	  <para>
	    Indicates that the parameter should be interpreted as the name of a variable.  If the variable
	    is set to a non-empty string, the parameter will be converted to the form
	    <replaceable>VAR</replaceable><literal>=</literal><replaceable>value</replaceable>.  If the variable
	    is set to the empty string or is unset, the parameter will be omitted entirely.  This provides
	    a concise syntax for passing through keyword parameters.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><literal>%&lt;</literal></term>
	<term><literal>%&gt;</literal></term>
	<term><literal>%&lt;&lt;</literal></term>
	<term><literal>%&gt;&gt;</literal></term>
	<listitem>
	  <para>
	    These forms are replaced with the appropriate shell redirection token.  Keep in mind that
	    <command>mk_target</command> does not execute the build command immediately, but merely
	    defines a rule for <command>make</command>.  Therefore, using shell redirection directly
	    will not achieve the desired effect.  Use these forms instead.
	  </para>
	</listitem>
	</varlistentry>
      <varlistentry>
	<term><literal>*</literal><replaceable>params</replaceable></term>
	<listitem>
	  <para>
	    Indicates that the parameter should be interpreted as a space-separated, internally
	    quoted list.  The list will be expanded into multiple parameters, with each subject to further
	    processing according to this list of forms.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><literal>#</literal><replaceable>params</replaceable></term>
	<listitem>
	  <para>
	    Indicates that the parameter should be interpreted as a space-separated,
	    internally-quoted list.  The list will be expanded into multiple parameters,
	    but no further processing will occur.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><command>make</command> macro forms</term>
	<listitem>
	  <para>
	    Macro forms such as <literal>$@</literal> and <literal>$*</literal> anywhere within a parameter 
	    will be expanded by <command>make</command> as usual.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </refsection>
  <refsection><info><title>Examples</title></info>
<programlisting><![CDATA[
# Generate bar.txt from foo.txt by replacing "apple" with "orange"
mk_target \
    TARGET="bar.txt" \
    DEPS="foo.txt" \
    sed "s/apple/orange/g" "%<" "&foo.txt" "%>" "&bar.txt"

# Generate "a bar.txt" from "a foo.txt" by replacing "apple" with "orange"
# This shows one way of dealing with spaces in filenames
mk_target \
    TARGET="a bar.txt" \
    DEPS="'a foo.txt'" \
    sed "s/apple/orange/g" "%<" "&'a foo.txt'" "%>" "&'a bar.txt'"

# An alternate approach to the above
mk_target \
    TARGET="a bar.txt" \
    DEPS="a\ foo.txt" \
    sed "s/apple/orange/g" "%<" "&a\ foo.txt" "%>" "&a\ bar.txt"

# Generate all.txt by concatenating all .txt files in the directory containing MakeKitBuild
mk_target \
    TARGET="all.txt" \
    DEPS="*.txt" \
    cat "&*.txt" "%>" "&all.txt"
]]></programlisting>
  </refsection>
  <refsection><info><title>See also</title></info>
    <para>
      <citerefentry><refentrytitle>mk_resolve_target</refentrytitle><manvolnum>3mk</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>mk_resolve_file</refentrytitle><manvolnum>3mk</manvolnum></citerefentry>
    </para>
  </refsection>
</refentry>
