#! /bin/sh
# ex: set tabstop=4 expandtab shiftwidth=4:
#
# Copyright (c) Centeris Corporation 2006
# Author: Gerald Carter <jerry@centeris.com>
#
# /etc/init.d/likewise-open
#
####
# chkconfig: 35 90 10
# description: Start and Stop the Centeris Likewise Identity Auth Daemon
####

CONF=/etc/samba/lwiauthd.conf
CENTERIS_PREFIX=/usr
AUTHD_BIN=${CENTERIS_PREFIX}/sbin/likewise-winbindd
PIDFILE=/var/run/likewise-winbindd.pid
SCRIPTNAME="likewise-open"

## Have to set the path for HP-UX boot process
PATH=/sbin:/usr/sbin:/bin:/usr/bin:$PATH
export PATH

if [ ! -f ${CONF} ]; then
    echo "Missing ${CONF}"
    exit 1
fi

# Check for the binary in locations it might be at for other OSs
if [ ! -x ${AUTHD_BIN} -a -d /opt/likewise-open ]; then
    CENTERIS_PREFIX=/opt/likewise-open
    AUTHD_BIN=${CENTERIS_PREFIX}/sbin/likewise-winbindd
fi

PROG_BIN="${AUTHD_BIN}"

if [ ! -x ${AUTHD_BIN} ]; then
    echo "Missing ${AUTHD_BIN}"
    exit 1
fi

##
## Determine what platform we are on
##
PLATFORM=""
if [ -f /etc/init.d/functions ]; then
    . /etc/init.d/functions
    PLATFORM="REDHAT"
elif [ -f /etc/rc.status ]; then
    . /etc/rc.status
    PLATFORM="SUSE"
elif [ -f /etc/debian_version ]; then
    . /lib/lsb/init-functions
    PLATFORM="DEBIAN"
elif [ `uname -s` = 'AIX' ]; then
    PLATFORM="AIX"
elif [ `uname -s` = 'HP-UX' ]; then
    PLATFORM="HP-UX"
else
    PLATFORM="UNKNOWN"
fi

if [ $PLATFORM = "HP-UX" ]; then
    LOCKFILE="/var/run/${SCRIPTNAME}.lock"
else
    LOCKFILE="/var/lock/subsys/${SCRIPTNAME}"
fi

if ! type printf 1>/dev/null 2>/dev/null; then
    # Usually printf is a shell built in, but on HPUX it is a program located
    # at /bin/printf. During system startup and shutdown the path is only
    # /sbin, so we need to manually find printf
    if [ -x /bin/printf ]; then
        alias printf=/bin/printf
    else
        echo "WARNING: unable to find printf program"
    fi
fi

# echo_replacement emulates echo for all platforms using printf. printf is a
# shell builtin that exists on all platforms.
echo_replacement()
{
    if [ "$1" = "-n" ]; then
        shift;
        printf %s "$*"
    else
        printf %s\\n "$*"
    fi
}

# 'echo -n' works with bash, but not with sh on Solaris, HPUX, and AIX.
if [ "`echo -n`" = "-n" ]; then
    alias echo=echo_replacement
fi

seq_replacement()
{
    FIRST=1
    INCREMENT=1
    case "$#" in
        0)
            echo too few arguments
            return 1
            ;;
        1)
            LAST="$1"
            ;;
        2)
            FIRST="$1"
            LAST="$2"
            ;;
        3)
            FIRST="$1"
            INCREMENT="$2"
            LAST="$3"
            ;;
        *)
            echo too many arguments
            return 1
            ;;
    esac
    let "i = $FIRST"
    while [ $i -le $LAST ]; do
        echo $i
        let "i = i + $INCREMENT"
    done
    return 0;
}

# seq doesn't exist on HPUX
if ! type seq 2>/dev/null 1>/dev/null; then
    alias seq=seq_replacement
fi

##
## small wrapper functions around distro specific calls
##

status_success() {
    case "${PLATFORM}" in
        REDHAT)
            echo_success
            echo
            ;;
        SUSE)
            rc_reset
            rc_status -v
            ;;
        DEBIAN)
            ;;
        AIX | HP-UX | UNKNOWN)
            echo "...ok"
            ;;
    esac
}

status_failed() {
    status=$1
    case "${PLATFORM}" in
        REDHAT)
            echo_failure
            echo
            ;;
        SUSE)
            rc_failed $status
            rc_status -v
            ;;
        DEBIAN)
            ;;
        AIX | HP-UX | UNKNOWN)
            echo "...failed"
            ;;
    esac
}

print_status () {
    status=$1

    if [ $status = 0 ]; then
        status_success
    else
        status_failed $status
    fi
}

generic_status()
{
    #Uses return codes specified in
    # http://refspecs.freestandards.org/LSB_3.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptact.html
    if [ -f "$PIDFILE" ]; then
        local pid="`cat "${PIDFILE}"`";

        #Is the pid valid?
        #Does the program with that pid match our program name?
        #HP-UX needs UNIX95 set to support the -o option
        local pid_comm="`UNIX95=1 ps -p $pid -o args= | awk '{print $1}'`"
        if [ "$pid_comm" = "<defunct>" ]; then
            #It is a zombie process
            return 4
        fi
        if [ "$pid_comm" = "${PROG_BIN}" ]; then
            #If the system keeps cmdline files, check it
            if [ -e /proc/${pid}/cmdline ]; then
                #We can't check the exe file because we may be looking
                #at a version of the program that has been overwritten
                grep -q ${PROG_BIN} /proc/${pid}/cmdline && return 0
            else
                return 0
            fi
        fi

        #Program is dead, but lock file exists
        [ -f "${LOCKFILE}" ] && return 2

        #Program is dead, but pid file exists
        return 1
    fi

    #Program is not running
    return 3
}

daemon_start() {
    case "${PLATFORM}" in
        REDHAT)
            echo -n $"Starting `basename ${AUTHD_BIN}`: "
            daemon ${AUTHD_BIN}
            status=$?
            ;;
        SUSE)
            echo -n "Starting Likewise Open Authentication Services"
            startproc ${AUTHD_BIN}
            status=$?
            ;;
        DEBIAN)
            log_daemon_msg "Starting Likewise Open Authentication Services" "likewise-open"
            start-stop-daemon --start --exec ${AUTHD_BIN}
            status=$?
            log_end_msg $status
            sleep 1
            ;;
        AIX)
            echo -n "Starting Centeris Authentication Services"
            if (lssrc -s dhcpcd | grep active >/dev/null); then
                # Wait up to 30 seconds for an ip address
                for i in `seq 30`; do
                    ifconfig -a | grep inet | grep -v 127.0.0 | grep -v 0.0.0.0 | grep -v ::1/0 >/dev/null && break
                    sleep 1
                done
            fi
            ${AUTHD_BIN}
            status=$?
            if [ $status -eq 0 ]; then
                status=1
                for i in `seq 5`; do
                    #Did the program start?
                    generic_status
                    status=$?
                    [ $status -eq 0 ] && break
                    sleep 1
                done
            fi
            if [ $status -eq 0 ]; then
                #This command will wait for likewise-winbindd to initialize before
                #returning
                #Ignore the exit code incase we aren't joined to a domain
                $CENTERIS_PREFIX/bin/lwiinfo -D `$CENTERIS_PREFIX/bin/lwiinfo --own-domain` 1>/dev/null 2>/dev/null
            fi
            ;;
        HP-UX)
            echo -n "Starting Centeris Authentication Services"
            ${AUTHD_BIN}
            status=$?
            if [ $status -eq 0 ]; then
                status=1
                for i in `seq 5`; do
                    #Did the program start?
                    generic_status
                    status=$?
                    [ $status -eq 0 ] && break
                    sleep 1
                done
            fi
            ;;
        UNKNOWN)
            ${AUTHD_BIN}
            status=$?
            ;;
    esac

    [ $status = 0 ] && [ ${PLATFORM} != "DEBIAN" ] && touch ${LOCKFILE}
    return $status
}

daemon_stop() {
    case "${PLATFORM}" in
        REDHAT)
            echo -n $"Stopping `basename ${AUTHD_BIN}`: "
            killproc `basename ${AUTHD_BIN}`
            status=$?
            ;;
        SUSE)
            echo -n "Stopping Likewise Open Authentication Services"
            killproc -TERM ${AUTHD_BIN}
            status=$?
            ;;
        DEBIAN)
            log_daemon_msg "Stopping Likewise Open Authentication Services"
            status=1
            #only try to stop the daemon if it is running
            if generic_status; then
                kill -TERM "`cat "${PIDFILE}"`"

                #Wait up to 5 seconds for the program to end
                for i in `seq 5`; do
                    #Did the program end?
                    generic_status
                    [ $? -ne 0 -a $? -ne 4 ] && status=0 && break
                    # use the following line instead after bug 3634 is fixed
                    #[ $? -eq 3 -o $? -eq 2 ] && status=0 && break
                    sleep 1
                done
            fi
            log_end_msg $status
            ;;
        AIX | HP-UX)
            echo -n "Stopping Centeris Authentication Services"
            status=1
            #only try to stop the daemon if it is running
            if generic_status; then
                pid="`cat "${PIDFILE}"`"
                kill -TERM $pid

                #Wait up to 5 seconds for the program to end
                for i in `seq 5`; do
                    #Did the program end?
                    generic_status
                    [ $? -ne 0 -a $? -ne 4 ] && status=0 && break
                    # use the following line instead after bug 3634 is fixed
                    #[ $? -eq 3 -o $? -eq 2 ] && status=0 && break
                    sleep 1
                done
            fi
            ;;
        UNKNOWN)
            killall -TERM `basename ${AUTHD_BIN}`
            status=$?
            ;;
    esac

    [ $status = 0 ] && rm -f ${LOCKFILE}
    return $status
}

daemon_status() {
    case "${PLATFORM}" in
        REDHAT)
        status ${AUTHD_BIN}
        ;;
        SUSE)
        checkproc ${AUTHD_BIN}
        rc_status -v
        ;;
        DEBIAN)
        #After the AIX functions are found safe, we should use them here
        status="1";
        if [ -e ${PIDFILE} ]; then
            pid=`cat ${PIDFILE}`
            if [ -e /proc/${pid}/cmdline ]; then
            grep -q ${AUTHD_BIN} /proc/${pid}/cmdline
            if [ $? = 0 ]; then
                status="0"
            fi
            fi
        fi
        if [ $status = 0 ]; then
            echo "running";
        else
            echo "stopped"
        fi
        return $status
        ;;
        AIX | HP-UX)
            generic_status
            status=$?
            case "$status" in
                0)
                    echo "running";
                    ;;
                1)
                    echo "stopped";
                    #Use the bellow line instead after bug 3634 is fixed
                    #echo "died leaving pid file";
                    ;;
                2)
                    echo "died leaving lock file";
                    ;;
                3)
                    echo "stopped";
                    ;;
            esac
            return $status
        ;;
        UNKNOWN)
        echo "Not implemented."
        ;;
    esac
}

#Sends the signal specified by the first parameter to all instances
#of $PROG_BIN
generic_killall()
{
    #This gets the list of all current running instances of PROG_BIN,
    #but it can't tell which directory the program was run from. If
    #cmdline is available in the proc pseudo-filesystem, we'll verify
    #the pids.
    local unverified_pids=`UNIX95=1 ps -e -o pid,args= | grep "${PROG_BIN}" | awk '{print $1}'`
    local pids=
    for pid in $unverified_pids; do
        #If the system keeps cmdline files, check them
        if [ -e /proc/${pid}/cmdline ]; then
            #We can't check the exe file because we may be looking
            #at a version of the program that has been overwritten
            grep -q ${AUTHD_BIN} /proc/${pid}/cmdline && pids="$pids $pid"
        else
            pids="$pids $pid"
        fi
    done

    for pid in $pids; do
        [ ! -z "`UNIX95=1 ps -p $pid -o pid=`" ] && kill "$1" $pid
    done

    #The manpage of killall says it returns 0 if at least one process is
    #killed. I can't get it to return anything other than 0. Even if no
    #processes die with SIGTERM. We'll just return 0 here too
    return 0
}

####################################################################
## Main init script code
##

case "$1" in
    start)
        daemon_start
        ret=$?
        print_status $ret
        ;;

    stop)
        daemon_stop
        ret=$?
        print_status $ret
        ;;

    # HP-UX calls this
    stop_msg)
        echo "Stopping Centeris Authentication Services"
        exit 0
        ;;

    # HP-UX calls this
    start_msg)
        echo "Starting Centeris Authentication Services"
        exit 0
        ;;

    restart)
        daemon_stop
        ret=$?
        print_status $ret
        # Start can't follow a stop too closely on Debian...
        if [ ${PLATFORM} = "DEBIAN" ]; then
            sleep 1
        fi
        daemon_start
        ret=$?
        print_status $ret
        ;;

    status)
        daemon_status
        ;;

    reload)
        echo -n "Reloading Centeris Authentication configuration file"
        if [ ${PLATFORM} = "AIX" ] || [ ${PLATFORM} = "HP-UX" ]; then
            #killall on AIX cannot search for a program name. We have to use
            #our own
            generic_killall -HUP
        else
            killall -HUP `basename ${AUTHD_BIN}`
        fi
        ret=$?
        print_status $ret
        ;;

    *)
        echo "Usage: $0 {start|stop|restart|status|reload}"
        exit 1
        ;;
esac


## end of script
####################################################################
