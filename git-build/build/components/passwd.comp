#!/bin/bash -c "exit 1"

COMP_INCREMENTAL=1
COMP_SOURCES=${BUILD_ROOT}/src/linux/passwd

function component_gather
{
    rsync -a --exclude=.svn ${BUILD_ROOT}/src/linux/passwd/ ${GATHER_DIR}/
}

function _setup_build_env
{
    set_compiler_env

    cd ${BUILDING_ROOT}
    exit_on_error $?

    CFLAGS="${_cflags} -D_REENTRANT -fPIC"
    LDSHFLAGS="${_ldshflags}"
    LDFLAGS="${_ldflags}"

    case "${BUILD_OS_TYPE}" in
        linux)
            LDFLAGS="$LDFLAGS -Wl,-rpath,${PREFIX_DIR}/${_lib}"
            ;;
        freebsd)
            LDFLAGS="$LDFLAGS -Wl,-rpath,${PREFIX_DIR}/${_lib}"
            ;;
        solaris)
            LDFLAGS="$LDFLAGS -R${PREFIX_DIR}/${_lib}"
            ;;
        aix)
	    CC="$(echo $CC | sed 's/^gcc/gcc-wrap.sh/')"
            CFLAGS="$CFLAGS -D_THREAD_SAFE"
            LDFLAGS="$LDFLAGS -Wl,-bsvr4 -Wl,-R${PREFIX_DIR}/${_lib}"
            ;;
	hpux)
	    LDFLAGS="$LDFLAGS -Wl,+b -Wl,${PREFIX_DIR}/${_lib}"
	    ;;
	darwin)
	    ;;
        *)
            echo "Unsupported OS: ${BUILD_OS_TYPE}"
            exit 1
            ;;
    esac

    export LDFLAGS CFLAGS LDSHFLAGS
}

function component_configure
{
    _setup_build_env

    autoreconf -fi && run_configure --prefix=${PREFIXDIR}
}

function component_build
{
   _setup_build_env

   ${MAKE} ${_mflags} all
}

function component_stage
{
    _setup_build_env

    ${MAKE} install \
	prefix=${STAGING_PREFIX_DIR} \
	exec_prefix=${STAGING_PREFIX_DIR} \
	bindir=${STAGING_PREFIX_DIR}/bin \
	sbindir=${STAGING_PREFIX_DIR}/sbin
}
#!/bin/bash

function component_populate
{
    COMP_NAME=passwd
    COMP_PREFIX_DIR=`get_comp_staging_prefix_dir ${COMP_NAME}`
    COMP_ROOT_DIR=`get_comp_staging_root_dir ${COMP_NAME}`

    mkdir -p ${POPULATE_PREFIX_DIR}
    rsync -a ${COMP_PREFIX_DIR}/ ${POPULATE_PREFIX_DIR}/
}
